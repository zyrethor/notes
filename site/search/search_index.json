{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Notes","text":"<p>Just some notes.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"CSES/graphs/cycle_finding/","title":"Cycle Finding","text":""},{"location":"CSES/graphs/cycle_finding/#code","title":"Code","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\n#define ll long long\n#define pb push_back\nconst ll INF = 1e18;\n\n\nint main() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(nullptr);\n\n  int n, m;\n  cin &gt;&gt; n &gt;&gt; m;\n\n  struct Edge {\n    int a, b;\n    ll w;\n  };\n\n  vector&lt;Edge&gt; ed(m);\n\n  for (int i = 0; i &lt; m; i++) {\n    cin &gt;&gt; ed[i].a &gt;&gt; ed[i].b &gt;&gt; ed[i].w;\n  }\n\n\n  vector&lt;ll&gt; dist(n+1, 0);\n  vector&lt;int&gt; pred(n+1, -1);\n  dist[0] = 0;\n  int x = -1;\n\n  for (int i= 1; i &lt;= n; i++) {\n    x = -1;\n    for (auto&amp; e : ed) {\n      if (dist[e.b] &gt; dist[e.a] + e.w) {\n        dist[e.b] = dist[e.a] + e.w;\n        pred[e.b] = e.a;\n        x = e.b;\n      }\n    }\n  }\n\n  if (x == -1) {\n    cout &lt;&lt; \"NO\\n\";\n    return 0;\n  }\n\n  for (int i = 0; i &lt; n; i++) {\n    x = pred[x];\n  }\n\n  int start = x;\n  vector&lt;int&gt; cycle;\n  cycle.pb(start);\n  x = pred[start];\n  while (x != start) {\n    cycle.pb(x);\n    x = pred[x];\n  }\n\n  cycle.pb(start);\n  reverse(cycle.begin(), cycle.end());\n  cout &lt;&lt; \"YES\\n\";\n  int len = cycle.size();\n  for (int i = 0; i &lt; len; i++) {\n    cout &lt;&lt; cycle[i] &lt;&lt; (i == len - 1 ? \"\\n\" : \" \");\n  }\n\n\n  return 0;\n}\n#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\n#define ll long long\n#define pb push_back\nconst ll INF = 1e18;\n\n\nint main() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(nullptr);\n\n  int n, m;\n  cin &gt;&gt; n &gt;&gt; m;\n\n  struct Edge {\n    int a, b;\n    ll w;\n  };\n\n  vector&lt;Edge&gt; ed(m);\n\n  for (int i = 0; i &lt; m; i++) {\n    cin &gt;&gt; ed[i].a &gt;&gt; ed[i].b &gt;&gt; ed[i].w;\n  }\n\n\n  vector&lt;ll&gt; dist(n+1, 0);\n  vector&lt;int&gt; pred(n+1, -1);\n  dist[0] = 0;\n  int x = -1;\n\n  for (int i= 1; i &lt;= n; i++) {\n    x = -1;\n    for (auto&amp; e : ed) {\n      if (dist[e.b] &gt; dist[e.a] + e.w) {\n        dist[e.b] = dist[e.a] + e.w;\n        pred[e.b] = e.a;\n        x = e.b;\n      }\n    }\n  }\n\n  if (x == -1) {\n    cout &lt;&lt; \"NO\\n\";\n    return 0;\n  }\n\n  for (int i = 0; i &lt; n; i++) {\n    x = pred[x];\n  }\n\n  int start = x;\n  vector&lt;int&gt; cycle;\n  cycle.pb(start);\n  x = pred[start];\n  while (x != start) {\n    cycle.pb(x);\n    x = pred[x];\n  }\n\n  cycle.pb(start);\n  reverse(cycle.begin(), cycle.end());\n  cout &lt;&lt; \"YES\\n\";\n  int len = cycle.size();\n  for (int i = 0; i &lt; len; i++) {\n    cout &lt;&lt; cycle[i] &lt;&lt; (i == len - 1 ? \"\\n\" : \" \");\n  }\n\n\n  return 0;\n}\n</code></pre>"},{"location":"CSES/graphs/flight_discount/","title":"Flight Discount","text":""},{"location":"CSES/graphs/flight_discount/#code","title":"Code","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\n#define ll long long\n#define pb push_back\n#define pii pair&lt;int, int&gt;\n#define tp tuple&lt;ll, int, int&gt;\n\nconst ll INF = 1e18;\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(nullptr);\n\n  int n, m;\n  cin &gt;&gt; n &gt;&gt; m;\n  int a, b, c;\n\n  vector&lt;vector&lt;pii&gt;&gt; adj(n+1);\n  for (int i = 0; i &lt; m; i++) {\n    cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;\n    adj[a].emplace_back(b, c);\n  }\n\n  vector&lt;ll&gt; d0(n+1, INF);\n  vector&lt;ll&gt; d1(n+1, INF);\n  d0[1] = 0;\n\n  // pq&lt;cost, node, state&gt;\n  priority_queue&lt;tp, vector&lt;tp&gt;, greater&lt;tp&gt;&gt; pq;\n  pq.emplace(0, 1, 0);\n  while (!pq.empty()) {\n    auto [cost, v, state] = pq.top();\n    pq.pop();\n\n    if (state == 0 &amp;&amp; cost &gt; d0[v]) continue;\n    if (state == 1 &amp;&amp; cost &gt; d1[v]) continue;\n\n    for (auto&amp; [to, weight] : adj[v]) {\n      ll w = (ll)weight;\n      if (state == 0) {\n        if (d0[to] &gt; d0[v] + w) {\n          d0[to] = d0[v] + w;\n          pq.emplace(d0[to], to, 0);\n        }\n\n        ll new_cost = d0[v] + w / 2;\n        if (d1[to] &gt; new_cost) {\n          d1[to] = new_cost;\n          pq.emplace(d1[to], to, 1);\n        }\n      }\n      else {\n        if (d1[to] &gt; d1[v] + w) {\n          d1[to] = d1[v] + w;\n          pq.emplace(d1[to], to, 1);\n        }\n\n      }\n    }\n  }\n\n  cout &lt;&lt; min(d0[n], d1[n]);\n\n  return 0;\n}\n</code></pre>"},{"location":"CSES/graphs/high_score/","title":"High Score","text":""},{"location":"CSES/graphs/high_score/#code","title":"Code","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\n#define ll long long\n#define pb push_back\n\n\nint main() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(nullptr);\n\n  int n, m;\n  cin &gt;&gt; n &gt;&gt; m;\n\n  struct Edge {\n    int a, b;\n    ll w;\n  };\n\n  vector&lt;Edge&gt; ed(m);\n  vector&lt;vector&lt;int&gt;&gt; adj(n+1, vector&lt;int&gt;());\n  vector&lt;vector&lt;int&gt;&gt; rv_adj(n+1, vector&lt;int&gt;());\n\n  // adj list\n  for (int i = 0; i &lt; m; i++) {\n    cin &gt;&gt; ed[i].a &gt;&gt; ed[i].b &gt;&gt; ed[i].w;\n    adj[ed[i].a].pb(ed[i].b);\n    rv_adj[ed[i].b].pb(ed[i].a);\n  }\n\n  // bfs\n  queue&lt;int&gt; q;\n\n  vector&lt;bool&gt; reach_from_start(n+1, false);\n  q.push(1);\n  reach_from_start[1] = true;\n  while (!q.empty()) {\n    int v = q.front();\n    q.pop();\n\n    for (auto&amp; to : adj[v]) {\n      if (!reach_from_start[to]) {\n        reach_from_start[to] = true;\n        q.push(to);\n      }\n    }\n  }\n\n  vector&lt;bool&gt; reach_to_end(n+1, false);\n  q.push(n);\n  reach_to_end[n] = true;\n  while (!q.empty()) {\n    int v = q.front();\n    q.pop();\n\n    for (auto&amp; to : rv_adj[v]) {\n      if (!reach_to_end[to]) {\n        reach_to_end[to] = true;\n        q.push(to);\n      }\n    }\n  }\n\n  vector&lt;int&gt; relevant(n+1, false);\n  for (int v = 1; v &lt;= n; v++) {\n    if (reach_from_start[v] &amp;&amp; reach_to_end[v])\n      relevant[v] = true;\n  }\n\n  // dp\n  const ll NEG_INF = -1e18;\n  vector&lt;ll&gt; dp(n+1, NEG_INF);\n  dp[1] = 0;\n  for (int i = 1; i &lt;= n-1; i++) {\n    bool updated = false;\n\n    for (auto&amp; e : ed) {\n      if (relevant[e.a] &amp;&amp; relevant[e.b]) {\n        if (dp[e.a] != NEG_INF &amp;&amp; dp[e.b] &lt; dp[e.a] + e.w) {\n          dp[e.b] = dp[e.a] + e.w;\n          updated = true;\n        }\n      }\n    }\n\n    if (!updated)\n      break;\n  }\n\n  bool has_cycle = false;\n  for (auto&amp; e : ed) {\n    if (relevant[e.a] &amp;&amp; relevant[e.b]) {\n      if (dp[e.a] != NEG_INF &amp;&amp; dp[e.b] &lt; dp[e.a] + e.w) {\n        has_cycle = true;\n        break;\n      }\n    }\n  }\n\n  if (has_cycle)\n    cout &lt;&lt; \"-1\\n\";\n  else\n    cout &lt;&lt; dp[n] &lt;&lt; \"\\n\";\n\n\n  return 0;\n}\n</code></pre>"},{"location":"CSES/graphs/shortest_routes_I/","title":"Shortest Routes I","text":""},{"location":"CSES/graphs/shortest_routes_I/#code","title":"Code","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\n#define ll long long\n#define pii pair&lt;ll, int&gt;\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(NULL);\n  int n, m;\n  cin &gt;&gt; n &gt;&gt; m;\n  vector&lt;vector&lt;pair&lt;int, ll&gt;&gt;&gt; adj(n + 1);\n  for (int i = 0; i &lt; m; i++) {\n    int a, b;\n    ll c;\n    cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;\n    adj[a].emplace_back(b, c);\n  }\n\n  vector&lt;ll&gt; dist(n+1, 1e18);\n  dist[1] = 0;\n  priority_queue&lt;pii, vector&lt;pii&gt;, greater&lt;pii&gt;&gt; pq;\n  pq.emplace(0, 1);\n\n  while (!pq.empty()) {\n    auto [cur_dist, u] = pq.top();\n    pq.pop();\n\n    if (cur_dist &gt; dist[u])\n      continue;\n\n    for (auto&amp; [v, w] : adj[u]) {\n      if (dist[v] &gt; dist[u] + w) {\n        dist[v] = dist[u] + w;\n        pq.emplace(dist[v], v);\n      }\n    }\n  }\n\n  for (int i = 1; i &lt;= n; i++) {\n    cout &lt;&lt; dist[i] &lt;&lt; (i == n ? \"\\n\" : \" \");\n  }\n}\n</code></pre>"},{"location":"CSES/graphs/shortest_routes_II/","title":"Shortest Routes II","text":""},{"location":"CSES/graphs/shortest_routes_II/#code","title":"Code","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\n#define ll long long\n#define pii pair&lt;ll, int&gt;\n#define INF 1e18\n\nll dist_mat[505][505];\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(NULL);\n  int n, m, q;\n  cin &gt;&gt; n &gt;&gt; m &gt;&gt; q;\n  for (int i = 1; i &lt;= n; i++) {\n    for (int j = 1; j &lt;= n; j++) {\n      dist_mat[i][j] = (i == j ? 0 : INF);\n    }\n  }\n\n  int a, b;\n  ll c;\n  for (int i = 0; i &lt; m; i++) {\n    cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;\n    if (c &lt; dist_mat[a][b]) {\n      dist_mat[a][b] = c;\n      dist_mat[b][a] = c;\n    }\n  }\n\n  for (int k = 1; k &lt;= n; k++) {\n    for (int i = 1; i &lt;= n; i++) {\n      if (dist_mat[i][k] == INF)\n        continue;\n      for (int j = 1; j &lt;= n; j++) {\n        if (dist_mat[k][j] == INF)\n          continue;\n\n        if (dist_mat[i][j] &gt; dist_mat[i][k] + dist_mat[k][j])\n          dist_mat[i][j] = dist_mat[i][k] + dist_mat[k][j];\n      }\n    }\n  }\n\n  while (q--) {\n    cin &gt;&gt; a &gt;&gt; b;\n    if (dist_mat[a][b] &lt; INF) {\n      cout &lt;&lt; dist_mat[a][b] &lt;&lt; \"\\n\";\n    }\n    else {\n      cout &lt;&lt; \"-1\\n\";\n    }\n  }\n\n  return 0;\n}\n</code></pre>"},{"location":"CSES/mathematics/Counting_Coprime_Pairs/","title":"Counting Coprime Pairs","text":"<p>notice long long</p> <pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\n#define ll long long\n#define pb push_back\n\nint main() {\n  ios::sync_with_stdio(false);\n  cin.tie(0);\n\n  int n;\n  cin &gt;&gt; n;\n  vector&lt;int&gt; v(n);\n  int mx = 0;\n  for (auto&amp; num : v) {\n    cin &gt;&gt; num;\n    mx = max(mx, num);\n  }\n\n  vector&lt;int&gt; freq(mx + 1, 0);\n  for (auto num : v) {\n    freq[num]++;\n  }\n\n  vector&lt;int&gt; mu(mx + 1, 1);\n  vector&lt;bool&gt; isPrime(mx + 1, true);\n  for (int i = 2; i &lt;= mx; i++) {\n    if (isPrime[i]) {\n      for (int j = i; j &lt;= mx; j+=i) {\n        isPrime[j] = false;\n        mu[j] *= -1;\n      }\n\n      ll sq = (ll)i * i;\n      for (ll j = sq; j &lt;= mx; j+=sq) {\n        mu[j] = 0;\n      }\n    }\n  }\n\n  vector&lt;int&gt; multiple(mx + 1, 0);\n  for (int i = 1; i &lt;= mx; i++) {\n    for (int j = i; j &lt;= mx; j+=i) {\n      multiple[i] += freq[j];\n    }\n  }\n\n  ll ans = 0;\n  for (int i = 1; i &lt;= mx; i++) {\n    if (mu[i] == 0)\n      continue;\n\n    ll cnt = (ll)multiple[i];\n    if (cnt &lt; 2)\n      continue;\n\n    ll pairs = (cnt * (cnt - 1)) / 2;\n    ans += (mu[i] * pairs);\n  }\n\n\n  cout &lt;&lt; ans;\n\n  return 0;\n}\n</code></pre>"},{"location":"algo/fft/","title":"FFT","text":""},{"location":"algo/fft/#complex-number-struct","title":"Complex Number Struct","text":"<pre><code>struct comp {\n  double x, y;\n  comp(double x = .0, double y = .0) : x(x), y(y) {}\n  inline comp conj() { return comp(x, -y); }\n};\n\ninline comp operator +(const comp&amp; a, const comp&amp; b) {\n  return comp(a.x + b.x, a.y + b.y);\n}\n\ninline comp operator -(const comp&amp; a, const comp&amp; b) {\n  return comp(a.x - b.x, a.y - b.y);\n}\n\ninline comp operator *(const comp&amp; a, const comp&amp; b) {\n  return comp(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x);\n}\n\ninline comp operator /(const comp&amp; a, const double&amp; b) {\n  return comp(a.x / b, a.y / b);\n}\n</code></pre> <p>It defines a complex number struct, and its <code>+, -, *, /</code> calculation.</p>"},{"location":"algo/fft/#namespace-fft","title":"Namespace FFT","text":""},{"location":"algo/fft/#precalc","title":"precalc","text":"<pre><code>const double PI = acosl(-1.0);\nvector&lt;comp&gt; w[LOGN];\nvector&lt;int&gt; rv;\n\nvoid precalc() {\n  forn(st, LOGN) {\n    w[st].resize(1 &lt;&lt; st);\n    forn(i, 1 &lt;&lt; st) {\n      double ang = PI / (1 &lt;&lt; st) * i;\n      w[st][i] = comp(cos(ang), sin(ang));\n    }\n  }\n\n  rv.assign(1 &lt;&lt; LOGN, 0);\n  fore(i, 1, sz(rv)) {\n    rv[i] = (rv[i &gt;&gt; 1] &gt;&gt; 1) | ((i &amp; 1) &lt;&lt; (LOGN - 1));\n  }\n}\n</code></pre> <p>w means omega, means rotation factors.</p> \\[ e^{\\frac{2\\pi i}{n}} \\] <p>Here only pi because we divide to 2. st means n. w[st][i] is the value in complex number. rv is reverse bits, size = 2^LOGN. if 5 in 4 bits(0101), rv will be 10(1010).</p>"},{"location":"algo/fft/#multiply","title":"multiply","text":"<pre><code>int ln = 1;\nwhile (ln &lt; (sza + szb)) {\n  ln &lt;&lt;= 1;\n}\n\nforn(i, ln) {\n  aa[i] = (i &lt; sza ? a[i] : comp());\n}\nforn(i, ln) {\n  bb[i] = (i &lt; szb ? b[i] : comp());\n}\n</code></pre> <p>if a, b polynomial is power 2 and 3 sza + szb = 5 we get minimal 2^3 = 8 &gt; 5 ln = 8</p> <p></p> <p>then we copy a to aa, other in 0</p> <p> <pre><code>fft(aa, ln, false);\nfft(bb, ln, false);\n\nforn(i, ln) {\n  cc[i] = aa[i] * bb[i];\n}\n\nfft(cc, ln, true);\n\nszc = ln;\nforn(i, szc) {\n  c[i] = int(cc[i].x + 0.5);\n}\n</code></pre> do fft on aa and bb multiply aa and bb do reverse fft on cc normalize cc becuase it's double, use rounding to get int</p>"},{"location":"algo/fft/#fft_1","title":"fft","text":"<pre><code>int ln = __builtin_ctz(n);\nforn(i, n) {\n  int ni = rv[i] &gt;&gt; (LOGN - ln);\n  if (i &lt; ni)\n    swap(a[i], a[ni]);\n}\n</code></pre> <p><pre><code>int ni = rv[i] &gt;&gt; (LOGN - ln);\n</code></pre>  get ln = log2(n) get a[idx],  idx = reverse bit </p> <pre><code>for(int st = 0; st &lt; ln; st++) {\n  int len = 1 &lt;&lt; st;\n  for(int k = 0; k &lt; n; k+=(len &lt;&lt; 1)) {\n    fore(pos, k, k+len) {\n      comp l = a[pos];\n      comp r = a[pos+len] * w[st][pos-k];\n\n      a[pos] = l + r;\n      a[pos+len] = l - r;\n    }\n  }\n}\n</code></pre> <p> <pre><code>for(int st = 0; st &lt; ln; st++)\n</code></pre>  st = each steps, in this img = 3</p> <p><pre><code>int len = 1 &lt;&lt; st;\n</code></pre>  len = stride = \\(2^{st}\\), in this img, 1, 2, 4</p> <p><pre><code>for(int k = 0; k &lt; n; k+=(len &lt;&lt; 1))\n</code></pre>  k = how many steps in each st, in this img, 4, 2, 1</p> <p><pre><code>fore(pos, k, k+len) {\n  comp l = a[pos];\n  comp r = a[pos+len] * w[st][pos-k];\n\n  a[pos] = l + r;\n  a[pos+len] = l - r;\n}\n</code></pre>  calculation</p> <p><pre><code>if (inv) {\n  forn(i, n) {\n    a[i] = a[i] / n;\n  }\n  reverse(a+1, a+n);\n}\n</code></pre> reverse fft</p>"},{"location":"algo/fft/#full-code","title":"Full Code","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\n#define fore(i, l, r) for(int i = int(l); i &lt; int(r); i++)\n#define forn(i, n) for(int i = 0; i &lt; int(n); i++)\n#define sz(a) int((a).size())\n\nconst int LOGN = 19;\nconst int N = (1 &lt;&lt; LOGN) + 555;\n\nstruct comp {\n  double x, y;\n  comp(double x = .0, double y = .0) : x(x), y(y) {}\n  inline comp conj() { return comp(x, -y); }\n};\n\ninline comp operator +(const comp&amp; a, const comp&amp; b) {\n  return comp(a.x + b.x, a.y + b.y);\n}\n\ninline comp operator -(const comp&amp; a, const comp&amp; b) {\n  return comp(a.x - b.x, a.y - b.y);\n}\n\ninline comp operator *(const comp&amp; a, const comp&amp; b) {\n  return comp(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x);\n}\n\ninline comp operator /(const comp&amp; a, const double&amp; b) {\n  return comp(a.x / b, a.y / b);\n}\n\nnamespace FFT {\nconst double PI = acosl(-1.0);\nvector&lt;comp&gt; w[LOGN];\nvector&lt;int&gt; rv;\n\nvoid precalc() {\n  forn(st, LOGN) {\n    w[st].resize(1 &lt;&lt; st);\n    forn(i, 1 &lt;&lt; st) {\n      double ang = PI / (1 &lt;&lt; st) * i;\n      w[st][i] = comp(cos(ang), sin(ang));\n    }\n  }\n\n  rv.assign(1 &lt;&lt; LOGN, 0);\n  fore(i, 1, sz(rv)) {\n    rv[i] = (rv[i &gt;&gt; 1] &gt;&gt; 1) | ((i &amp; 1) &lt;&lt; (LOGN - 1));\n  }\n}\n\ninline void fft(comp a[N], int n, bool inv) {\n  int ln = __builtin_ctz(n);\n  forn(i, n) {\n    int ni = rv[i] &gt;&gt; (LOGN - ln);\n    if (i &lt; ni)\n      swap(a[i], a[ni]);\n  }\n\n  for(int st = 0; st &lt; ln; st++) {\n    int len = 1 &lt;&lt; st;\n    for(int k = 0; k &lt; n; k+=(len &lt;&lt; 1)) {\n      fore(pos, k, k+len) {\n        comp l = a[pos];\n        comp r = a[pos+len] * w[st][pos-k];\n\n        a[pos] = l + r;\n        a[pos+len] = l - r;\n      }\n    }\n  }\n\n  if (inv) {\n    forn(i, n) {\n      a[i] = a[i] / n;\n    }\n    reverse(a+1, a+n);\n  }\n\n}\n\ncomp aa[N], bb[N], cc[N];\ninline void multiply(int a[N], int sza, int b[N], int szb, int c[N], int&amp; szc) {\n  int ln = 1;\n  while (ln &lt; (sza + szb)) {\n    ln &lt;&lt;= 1;\n  }\n\n  forn(i, ln) {\n    aa[i] = (i &lt; sza ? a[i] : comp());\n  }\n  forn(i, ln) {\n    bb[i] = (i &lt; szb ? b[i] : comp());\n  }\n\n  fft(aa, ln, false);\n  fft(bb, ln, false);\n\n  forn(i, ln) {\n    cc[i] = aa[i] * bb[i];\n  }\n\n  fft(cc, ln, true);\n\n  szc = ln;\n  forn(i, szc) {\n    c[i] = int(cc[i].x + 0.5);\n  }\n}\n\n}\n\nint main() {\n  int a[N] = {1, 2, 3};\n  int b[N] = {4, 5, 6};\n  int c[N];\n\n  FFT::precalc();\n\n  int szc;\n  FFT::multiply(a, 3, b, 3, c, szc);\n\n  forn(i, szc) {\n    cout &lt;&lt; c[i] &lt;&lt; \" \";\n  }\n  cout &lt;&lt; \"\\n\";\n\n  return 0;\n}\n</code></pre>"},{"location":"algo/fft/#references","title":"References","text":"<ol> <li>The Fast Fourier Transform (FFT): Most Ingenious Algorithm Ever?</li> <li>Cooley\u2013Tukey FFT algorithm</li> </ol>"},{"location":"algo/mobius/","title":"Mobius Function","text":""},{"location":"algo/mobius/#code","title":"Code","text":"<pre><code>int mu[n], minD[n];\nvector&lt;int&gt; divs[n];\n\nvoid precalcDivs(int n) {\n  for (int d = 1; d &lt; n; d++) {\n    for (int v = d; v &lt; n; v+=d) {\n      divs[v].pb(d);\n    }\n  }\n\n  mu[1] = 1;\n\n  for (int d = 2; d &lt; n; d++) {\n    if (minD[d] == 0)\n      minD[d] = d;\n\n    if (minD[d] != minD[d / minD[d]])\n      mu[d] = -mu[d / minD[d]];\n\n    for (int v = 2 * d; v &lt; n; v+=d) {\n      if (minD[v] == 0)\n        minD[v] = d;\n    }\n  }\n}\n</code></pre>"},{"location":"algo/mobius/#code-with-comment","title":"Code with Comment","text":"<pre><code>#include &lt;bits/stdc++.h&gt;\nusing namespace std;\n\n#define pb push_back\n\nconst int n = 10;\n// mu = Mobius function\n// minD = smallest prime factor of a number\n// divs = list of divisors for each number\nint mu[n], minD[n];\nvector&lt;int&gt; divs[n];\n\nvoid precalcDivs(int n) {\n  // Store each number's divisors in divs array\n  for (int d = 1; d &lt; n; d++) {\n    for (int v = d; v &lt; n; v+=d) {\n      divs[v].pb(d);\n    }\n  }\n\n  // mo(1) = 1\n  mu[1] = 1;\n\n  for (int d = 2; d &lt; n; d++) {\n    // If minD[d] is still 0, it means d is a prime number\n    if (minD[d] == 0)\n      minD[d] = d;\n\n    // Determine the value of mu[d]:\n    // If d is divisible by its smallest prime factor more than once, mu[d] is 0 (as it's not square-free)\n    // Otherwise, mu[d] is -1 or 1 depending on the number of prime factors (calculated recursively)\n    if (minD[d] != minD[d / minD[d]])\n      mu[d] = -mu[d / minD[d]];\n\n    // Set the smallest prime factor for all multiples of d that haven't been assigned yet\n    for (int v = 2 * d; v &lt; n; v+=d) {\n      if (minD[v] == 0)\n        minD[v] = d;\n    }\n\n  }\n}\n\nint main() {\n  precalcDivs(n);\n\n  for (int i = 0; i&lt;n;i++) {\n    cout &lt;&lt; mu[i] &lt;&lt; \" \";\n  }\n  cout &lt;&lt; endl;\n\n  return 0;\n}\n</code></pre>"},{"location":"archlinux/archlinux_dual_boot/","title":"Arch Linux Dual Boot with Windows 11","text":""},{"location":"archlinux/archlinux_dual_boot/#preparation-on-windows-11","title":"Preparation on Windows 11","text":"<p>We will install Windows 11 first, then Arch Linux.</p> <p>We need at least 512MB EFI partition in Arch Linux, so we will create a 1GB EFI system during Windows 11 Installation.</p> <p>Reference</p> <p>To create a 1GB EFI boot system:</p> <ol> <li>remove all the partitions</li> <li><code>shift + f10</code> to open cmd</li> </ol> <p>and then</p> <pre><code>diskpart\nlist disk\nsel disk 1\ncreate partition efi size=1024\nformat quick fs=fat32 label=System\nexit\n</code></pre> <p>and then keep installing Windows 11.</p>"},{"location":"archlinux/archlinux_dual_boot/#create-live-usb-for-arch-linux","title":"Create Live USB for Arch Linux","text":"<p>Now for Arch Linux.</p> <p>First, we need to allocate some space for Arch Linux, so we go to disk management, and shrink the Windows 11 we installed, like 200GB.</p> <p>and then create Live USB for Arch Linux, balenaEtcher</p> <p>When install Arch Linux, if you need wifi, type <code>iwctl</code></p> <pre><code>iwctl\ndevice list\nstation wlan0 scan\nstation wlan0 get-networks\nstation wlan0 connect IAN2\n</code></pre> <p>and then <code>ping google.com</code> to test</p>"},{"location":"archlinux/archlinux_dual_boot/#config-before-installation","title":"Config Before Installation","text":"<p>Note</p> <p>make terminal font bigger</p> <pre><code>cd /usr/share/kbd/consolefonts/\nsetfont ter-d20b.psf.gz\n</code></pre> <p>in <code>/etc/makepkg.conf</code></p> <pre><code>MAKEFLAGS=\"-j$(expr $(nproc) \\+ 1)\"\n</code></pre> <p>in <code>/etc/pacman.conf</code></p> <pre><code>Color\nParallelDownloads = 5\n</code></pre> <pre><code>[core]\nServer = http://archlinux.cs.nctu.edu.tw/$repo/os/$arch\nInclude = /etc/pacman.d/mirrorlist\n\n[extra]\nServer = http://archlinux.cs.nctu.edu.tw/$repo/os/$arch\nInclude = /etc/pacman.d/mirrorlist\n\n#[community-testing]\n#Include = /etc/pacman.d/mirrorlist\n\n[community]\nServer = http://archlinux.cs.nctu.edu.tw/$repo/os/$arch\nInclude = /etc/pacman.d/mirrorlist\n</code></pre> <pre><code>pacman -Syy\n</code></pre>"},{"location":"archlinux/archlinux_dual_boot/#partitioning","title":"Partitioning","text":"<pre><code>lsblk\n</code></pre> <pre><code>NAME        MAJ:MIN RM   SIZE RO TYPE MOUNTPOINTS\nnvme0n1     259:0    0 931.5G  0 disk\n\u251c\u2500nvme0n1p1 259:1    0     1G  0 part /boot           # EFI System\n\u251c\u2500nvme0n1p2 259:2    0    16M  0 part\n\u251c\u2500nvme0n1p3 259:3    0 730.5G  0 part                 # Windows 11 Partition\n\u251c\u2500nvme0n1p4 259:4    0     8G  0 part [SWAP]          # Linux Swap\n\u2514\u2500nvme0n1p5 259:5    0   192G  0 part /               # Linux Partition\n</code></pre> <p>and use <code>cfdisk /dev/nvme0n1</code> to partition</p> <pre><code>mkswap /dev/nvme0n1p4\nswapon /dev/nvme0n1p4\nmkfs.ext4 /dev/nvme0n1p5\n</code></pre>"},{"location":"archlinux/archlinux_dual_boot/#mount-the-file-systems","title":"Mount the file systems","text":"<pre><code>mount /dev/nvme0n1p5 /mnt\n</code></pre> <pre><code>mount --mkdir /dev/nvme0n1p1 /mnt/boot\n</code></pre> <pre><code>pacstrap /mnt base linux linux-firmware vim\n</code></pre> <pre><code>genfstab -U /mnt &gt;&gt; /mnt/etc/fstab\narch-chroot /mnt\n</code></pre>"},{"location":"archlinux/archlinux_dual_boot/#set-time-and-locale","title":"Set Time and Locale","text":"<pre><code>ln -sf /usr/share/zoneinfo/Asia/Taipei /etc/localtime\n</code></pre> <pre><code>vim /etc/locale.gen\n</code></pre> <pre><code># uncomment this line\nen_US.UTF-8 UTF-8\n</code></pre> <pre><code>locale-gen\necho LANG=en_US.UTF-8 &gt; /etc/locale.conf\n</code></pre> <p>the name is the computer's name</p> <pre><code>echo myarch &gt; /etc/hostname\n</code></pre> <pre><code>vim /etc/hosts\n</code></pre> <pre><code>127.0.0.1 localhost\n::1 localhost\n127.0.1.1 myarch\n</code></pre> <pre><code>passwd\n</code></pre>"},{"location":"archlinux/archlinux_dual_boot/#install-grub-boot-loader","title":"Install Grub Boot Loader","text":"<pre><code>pacman -S grub efibootmgr os-prober networkmanager wireless_tools wpa_supplicant iwd\n</code></pre> <pre><code>systemctl enable NetworkManager\nsystemctl enable iwd\n</code></pre> <p>install grub:</p> <pre><code>grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB\n</code></pre> <p>in <code>/etc/default/grub</code>, uncomment (this can be done by archlinux_install script):</p> <pre><code>GRUB_DISABLE_OS_PROBER=false\n</code></pre> <p>Generate grub config:</p> <pre><code>grub-mkconfig -o /boot/grub/grub.cfg\n</code></pre> <p>Note</p> <p>After we reboot, we may see that there's no windows 11 option on grub menu, just log in Arch Linux, and type:</p> <pre><code>sudo grub-mkconfig -o /boot/grub/grub.cfg\n</code></pre>"},{"location":"archlinux/archlinux_dual_boot/#add-user","title":"Add User","text":"<p>the name is the user's name</p> <pre><code>pacman -S sudo\nuseradd -m ian\npasswd ian\n</code></pre> <pre><code>usermod -aG wheel,audio,video,storage ian\n</code></pre> <pre><code>EDITOR=vim visudo\n</code></pre> <p>uncomment this line</p> <pre><code>## Uncomment to allow members of group wheel to execute any command\n%wheel ALL=(ALL:ALL) ALL\n</code></pre>"},{"location":"archlinux/archlinux_dual_boot/#finish-arch-linux-installation","title":"Finish Arch Linux Installation","text":"<pre><code>exit\n</code></pre> <pre><code>umount /mnt\n</code></pre> <p>or</p> <pre><code>umount -l /mnt\n</code></pre> <pre><code>shutdown now\n</code></pre>"},{"location":"archlinux/archlinux_dual_boot/#after-installation","title":"After Installation","text":"<p>connect wifi with <code>nmtui</code> or <code>iwctl</code></p> <p>After Installation</p> <p>config terminal fonts</p> <pre><code>sudo pacman -S terminus-font\ncd /usr/share/kbd/consolefonts/\nsetfont ter-d20b.psf.gz\n</code></pre> <p>in <code>/etc/vconsole.conf</code></p> <pre><code>FONT=ter-d20b.psf.gz\n</code></pre> <p>in <code>/etc/makepkg.conf</code></p> <pre><code>MAKEFLAGS=\"-j$(expr $(nproc) \\+ 1)\"\n</code></pre> <p>in <code>/etc/pacman.conf</code></p> <pre><code>Color\nParallelDownloads = 5\n</code></pre> <pre><code>[core]\nServer = http://archlinux.cs.nctu.edu.tw/$repo/os/$arch\nInclude = /etc/pacman.d/mirrorlist\n\n[extra]\nServer = http://archlinux.cs.nctu.edu.tw/$repo/os/$arch\nInclude = /etc/pacman.d/mirrorlist\n\n#[community-testing]\n#Include = /etc/pacman.d/mirrorlist\n\n[community]\nServer = http://archlinux.cs.nctu.edu.tw/$repo/os/$arch\nInclude = /etc/pacman.d/mirrorlist\n</code></pre>"},{"location":"archlinux/archlinux_dual_boot/#install-yay-aur-helper","title":"Install Yay AUR Helper","text":"<pre><code>sudo pacman -Syy\n</code></pre> <p>copy github ip to <code>/etc/hosts</code>:</p> <pre><code>140.82.114.3 github.com\n</code></pre> <pre><code>sudo pacman -S base-devel git\ngit clone https://aur.archlinux.org/yay.git\ncd yay\nmakepkg -si\n</code></pre>"},{"location":"archlinux/archlinux_dual_boot/#install-user-packages","title":"Install User Packages","text":"<pre><code>git clone https://github.com/zyrethor/archlinux_install\ncd archlinux_install\n./install.sh ## default install packages\n./install.sh -s ## install system settings\n./install.sh -a ## install additional packages\n./install.sh -vm ## install vmware packages, after installation, reboot\n</code></pre> <p>If the installation takes too long, then lengthen sudo timeout, for example 60 min:</p> <pre><code>sudo EDITOR=vim visudo\n\nDefaults env_reset, timestamp_timeout=60\n</code></pre>"},{"location":"archlinux/archlinux_tips/","title":"Arch Linux Tips","text":""},{"location":"archlinux/archlinux_tips/#wifi","title":"Wifi","text":"<p>After installed Arch Linux, you can use <code>iwd</code> or <code>nmtui</code> to connect wifi.</p>"},{"location":"archlinux/archlinux_tips/#customize-grub","title":"Customize Grub","text":"<pre><code>sudo vim /etc/default/grub\nGRUB_GFXMODE=1024x768\n</code></pre> <pre><code>git clone https://github.com/vinceliuice/grub2-themes.git\ncd grub2-themes\nsudo ./install.sh -t stylish -s 2k\n</code></pre>"},{"location":"archlinux/archlinux_tips/#vmware","title":"Vmware","text":"<pre><code>sudo systemctl start vmware-networks-configuration.service\nsudo systemctl start vmware-networks.service\nsudo modprobe -a vmw_vmci vmmon\n\n\nsudo pacman -S open-vm-tools xf86-video-vmware xf86-input-vmmouse\nsudo systemctl enable vmtoolsd.service vmware-vmblock-fuse.service\n</code></pre>"},{"location":"archlinux/archlinux_tips/#install-fish","title":"Install Fish","text":"<pre><code>curl https://raw.githubusercontent.com/oh-my-fish/oh-my-fish/master/bin/install | fish\nomf theme\nomf install eclm\n</code></pre>"},{"location":"archlinux/archlinux_tips/#install-zsh","title":"Install Zsh","text":"<pre><code>sh -c \"$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"\n</code></pre>"},{"location":"archlinux/archlinux_tips/#neovim","title":"Neovim","text":"<pre><code>curl -sL https://raw.githubusercontent.com/jorgebucaran/fisher/main/functions/fisher.fish | source &amp;&amp; fisher install jorgebucaran/fisher\nfisher install jorgebucaran/nvm.fish\n\nnvm install 18\nnvm use 18\nnpm install -g tree-sitter-cli\n</code></pre>"},{"location":"archlinux/archlinux_tips/#vim","title":"Vim","text":"<pre><code>curl -fLo ~/.vim/autoload/plug.vim --create-dirs \\\\\\n    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim\n\ncd ~/.vim/plugged/youcompleteme\n./install.py --clang-completer\n</code></pre>"},{"location":"archlinux/archlinux_tips/#link-sh-to-bash","title":"Link sh to bash","text":"<pre><code>ls -l /bin/sh\n</code></pre>"},{"location":"archlinux/archlinux_tips/#sudo-timeout","title":"Sudo Timeout","text":"<p>lengthen sudo timeout, for example 60 min <pre><code>sudo visudo\n\nDefaults env_reset, timestamp_timeout=60\n</code></pre></p>"},{"location":"archlinux/archlinux_tips/#change-chrome-font","title":"Change Chrome Font","text":"Type Font Standard font Arial Serif font Arial Sans-serif font Arial Fixed-width font Noto Sans Mono CJK TC Mathematical font Noto Sans Mono CJK TC"},{"location":"archlinux/archlinux_tips/#chezmoi","title":"Chezmoi","text":"<pre><code>chezmoi --init apply zyrethor\n\nchezmoi update\n</code></pre>"},{"location":"archlinux/archlinux_tips/#error-gpgme-error-no-data","title":"error: GPGME error: No data","text":"<p><pre><code>sudo rm -r /var/lib/pacman/sync/\n</code></pre> resource</p>"},{"location":"archlinux/archlinux_tips/#neovim-different-indent","title":"Neovim different indent","text":"<pre><code>:set expandtab\n:retab\n</code></pre>"},{"location":"archlinux/archlinux_tips/#remove-serial-number-in-filename-notion-backup","title":"remove serial number in filename (notion backup)","text":"<pre><code>file:\nfind . -type f -name \"*.md\" -exec perl-rename 's/ [0-9a-z]{32}//' {} +\n\nfolder:\n#!/bin/bash\nfind . -type d -name \"* *\" | sort -r | while read -r dir; do\n  newdir=$(echo \"$dir\" | sed 's/ [0-9a-z]{32}//')\n  mv \"$dir\" \"$newdir\"\ndone\n</code></pre>"},{"location":"archlinux/archlinux_tips/#chmod","title":"chmod","text":"<p>only directories</p> <pre><code>find * -type d -exec chmod 755 {} +\n</code></pre> <p>only files</p> <pre><code>find * -type f -exec chmod 644 {} +\n</code></pre> <p>use fd to batch process, use <code>-X</code> instead of <code>-x</code></p> <pre><code>fd -t d -X chmod 755 {}\n</code></pre> <pre><code>fd -t f -X chmod 644 {}\n</code></pre>"},{"location":"archlinux/archlinux_tips/#convert-video-format","title":"Convert Video Format","text":"<pre><code>ffmpeg -i test.webm -c copy test.mp4\n</code></pre>"},{"location":"archlinux/archlinux_tips/#yt-dlp","title":"yt-dlp","text":"<p>download only audio</p> <pre><code>yt-dlp --extract-audio 'https://www.youtube.com/watch?v='\n</code></pre> <p>it will select opus format (default)</p> <p>if you want to select differnt format, use <code>--audio-format</code></p> <p>download only mp3</p> <pre><code>yt-dlp --extract-audio --audio-format mp3 'https://www.youtube.com/watch?v='\n</code></pre>"},{"location":"archlinux/archlinux_tips/#repeat-key-speed","title":"Repeat Key Speed","text":"<p>in <code>~/.xinitrc</code></p> <p>xset r rate [delay] [rate]</p> <pre><code>xset r rate 200 20\n</code></pre>"}]}